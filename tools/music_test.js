const MUSIC = [
    0.00120,
    [60,60,59,59,57,59,57,55,55,55,57,59,60,59,57,55,72,72,71,72,71,71,69,71,69,71,69,67,67,67,69,71,72,71,71,66,67,69,67,80,81,82,83,84,84,83,84,83,83,84,83,81,83,81,83,81,83,81,79,79,79,81,83,84,83,84,83,84,83,83,78,79,81,79,79,78,77,76,75,74,73,72,84,71,72,71,83,69,71,69,71,69,71,69,67,91,72,72,83,83,84,83,84,83,84,85,86,87,88,89,102,93,91,72,79,72,76,71,72,71,74,71,69,72,69,72,71,69,67,71,67,71,67,67,69,71,72,79,72,79,83,71,83,71,83,71,84,69,67,83,67,83,67,83,67,83,67,83,67,83,67,83,72,91,72,88,71,72,71,86,71,69,84,69,84,71,86,71,86,69,84,69,84,67,83,67,83,67,83,67,71,74,71,67,71,74,79,74,71,74,79,72,91,91,91,95,91,95,71,71,69,97,69,67,98,67,98,67,98,67,98,68,99,69,100,70,101,60,88,91,60,88,91,59,86,91,59,86,91,57,84,84,59,91,57,84,86,55,88,86,94,95,91,94,95,91,103,60,100,91,91,103,59,98,91,103,102,100,57,102,100,55,95,71,70,71,70,67,60,94,93,91,93,94,93,91,89,86,85,84,82,84,57,86,87,59,88,91,57,93,95,55,67,67,67,67,60,99,100,103,60,99,100,103,59,98,103,101,98,97,91,94,93,91,57,89,85,84,55,83,55,67,58,70,55,67,58,70,59,71,60,72,64,76,67,79,76,88,79,91,83,95,59,71,62,74,66,78,74,86,78,90,81,93,57,69,61,73,64,76,55,59,62,65,67,71,74,77,79,83,86,89,91,95,98,101,103,102,103,102,103,102,103,102,103,102,103,102,103,55],
    [0,288,288,292,288,196,100,196,288,100,100,100,384,576,576,196,672,292,196,52,52,288,196,52,52,196,100,196,292,100,100,100,384,480,100,480,52,52,196,480,52,52,52,52,292,196,52,52,196,52,52,196,52,52,196,100,52,52,100,288,100,100,100,384,52,52,52,52,292,100,480,52,52,196,336,52,52,52,52,52,52,52,288,196,52,52,288,196,52,52,196,196,52,52,100,292,480,100,480,100,52,52,52,52,52,52,52,52,52,52,52,52,196,672,100,196,100,196,52,52,100,100,288,52,52,52,52,100,196,52,52,52,148,100,100,100,384,100,100,100,288,52,52,52,52,52,52,292,196,52,52,52,52,52,52,52,52,52,52,52,52,52,52,100,196,100,196,52,52,196,100,196,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,100,196,100,52,52,52,52,292,288,288,100,100,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,148,100,52,148,100,52,148,100,52,148,100,52,52,100,52,52,52,52,100,52,52,100,100,100,100,100,100,196,100,52,148,100,196,100,52,148,100,100,100,100,52,52,100,52,52,100,100,100,100,100,52,52,100,100,100,100,100,100,100,100,100,100,100,100,52,52,100,52,52,100,52,52,100,100,100,100,100,100,52,52,100,100,52,52,100,100,52,52,100,100,100,100,100,100,100,100,52,52,100,100,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,624],

 ]
 /*
const MUSIC = [
    0.00192
    [63,64,67,69,72,72,72,71,72,69,72,68,72,67,72,68,72,69,72,67,72,67,72,68,72,69,73,70,74,71,67,74,72,74,72,74,71,74,69,74,68,74,67,74,68,74,69,74,67,74,67,74,68,74,69,75,71,76,72,60,64,67,72,72,72,71,72,69,72,68,72,67,72,68,72,69,72,67,72,67,72,68,72,69,73,70,74,71,67,74,72,74,72,74,71,74,69,74,68,74,67,74,68,74,69,74,67,74,67,74,68,74,69,75,71,76,72,48,55,58,64,67,72,53,60,65,69,74,74,69,65,60,72,48,55,60,64,69,74,74,69,64,60,55,72,50,54,60,64,69,74,50,54,60,64,69,74,74,50,74,72,52,71,53,69,54,67,55,66,57,65,59,51,52,55,57,64,60,64,59,64,57,64,56,64,55,64,56,64,57,64,55,64,55,64,56,64,57,66,58,67,59,55,65,60,65,60,65,59,65,57,65,56,65,55,65,56,65,57,65,55,65,55,65,56,65,57,59,67,64,60,60,64,67,72,76,71,69,68,67,64,68,69,67,79,69,79,71,79,72,71,79,69,71,79,72,71,69,79,71,67,79,72,79,72,79,71,71,69,71,68,71,67,68,71,69,67,67,68,69,71,72,74,75,79,72,72,71,69,68,67,79,68,69,79,67,79,68,79,69,70,70,79,70,79,67,72,72,71,69,68,67,68,69,71,67,71,67,71,68,71,69,75,71,76,72,60,41,48,53,57,62,41,48,53,57,62,60,43,48,52,57,62,43,48,52,57,62,64,67,72,50,54,60,64,69,74,50,54,60,64,69,74,74,50,74,72,52,71,53,69,54,67,55,66,57,65,59,51,52,55,57,64,60,64,59,64,57,64,56,64,55,64,56,64,57,64,55,64,55,64,56,64,57,66,58,67,59,59,67,67,60,67,59,65,57,65,56,65,55,65,56,65,57,71,67,71,67,71,68,71,69,75,71,76,72,48,55,58,64,67,72,53,69,53,72,69,54,74,72,54,55,64,55,67,61,45,70,69,45,69,66,60,70,66,60,71,67,62,67,65,59,55,48,55,60,64,67,72],
    [512,64,64,64,64,128,64,0,192,0,192,0,192,0,192,0,128,0,448,0,128,0,64,0,192,0,192,0,128,0,768,64,0,128,0,64,0,192,0,192,0,192,0,192,0,128,0,448,0,128,0,64,0,192,0,192,0,128,0,576,64,128,64,128,64,0,192,0,192,0,192,0,192,0,128,0,448,0,128,0,64,0,192,0,192,0,128,0,768,64,0,128,0,64,0,192,0,192,0,192,0,192,0,128,0,448,0,128,0,64,0,192,0,192,0,192,0,576,16,16,16,16,16,112,16,16,16,16,128,4,4,4,1076,256,16,16,16,16,16,112,4,4,4,4,1072,256,16,16,16,16,16,112,4,4,4,4,4,1324,0,128,64,0,192,0,192,0,192,0,192,0,192,0,128,64,64,64,64,0,192,0,192,0,192,0,192,0,192,0,128,0,448,0,128,0,64,0,192,0,192,0,128,0,768,64,0,128,0,64,0,192,0,192,0,192,0,192,0,192,0,384,0,128,0,64,0,192,0,192,0,192,0,512,64,128,64,128,64,192,320,64,128,64,128,384,192,64,192,0,128,0,64,0,128,64,0,48,48,48,48,0,512,64,0,128,0,64,0,192,0,192,0,192,0,192,128,0,448,128,64,192,192,192,512,64,128,64,128,64,192,192,192,128,64,128,384,64,128,64,128,64,192,192,0,192,0,512,64,128,64,192,192,192,192,128,448,0,128,0,64,0,192,0,192,0,192,0,512,256,16,16,16,16,128,4,4,4,4,1072,256,16,16,16,16,128,4,4,4,4,1072,4,4,248,16,16,16,16,16,112,4,4,4,4,4,1324,0,128,64,0,192,0,192,0,192,0,192,0,192,0,128,64,64,64,64,0,192,0,192,0,192,0,192,0,192,0,128,0,448,0,128,0,64,0,192,0,192,0,128,0,768,0,192,0,64,0,192,0,192,0,192,0,192,0,192,0,384,0,128,0,64,0,192,0,192,0,192,0,384,16,16,16,16,16,304,0,192,0,128,64,0,128,64,192,0,192,0,128,64,0,128,64,192,0,0,192,0,0,128,0,0,192,0,0,0,256,16,16,16,16,16],
    // [64,64,64,64,128,64,96,96,96,96,96,96,192,192,128,128,448,448,128,128,64,64,96,96,192,192,128,128,448,448,64,128,128,64,64,96,96,96,96,96,96,96,96,128,128,448,448,128,128,64,64,96,96,96,96,128,128,448,448,64,128,64,128,64,96,96,96,96,96,96,192,192,128,128,448,448,128,128,64,64,96,96,192,192,128,128,448,448,64,128,128,64,64,96,96,96,96,96,96,96,96,128,128,448,448,128,128,64,64,96,96,96,96,192,192,576,576,192,176,160,144,128,112,192,176,160,144,128,768,764,760,756,192,192,176,160,144,128,112,768,764,760,756,752,192,192,176,160,144,128,112,768,764,760,756,752,748,128,192,64,96,96,96,96,192,192,96,96,96,96,128,128,64,64,64,64,192,192,192,192,96,96,96,96,96,96,128,128,448,448,128,128,64,64,96,96,96,96,128,128,448,448,64,128,128,64,64,96,96,96,96,96,96,96,96,96,96,384,384,128,128,64,64,96,96,96,96,192,576,384,384,64,128,64,128,64,96,288,64,128,64,128,352,192,256,192,128,128,64,64,128,160,64,48,192,48,48,48,384,384,64,128,128,64,64,96,96,96,96,96,96,96,96,128,448,448,128,64,96,192,192,384,64,120,64,64,64,96,96,96,128,448,128,352,192,160,64,160,64,192,192,188,192,380,384,64,128,64,96,96,96,96,128,448,128,128,64,64,96,96,96,96,192,192,384,384,256,192,176,160,144,128,960,956,952,948,944,256,192,176,160,144,128,960,956,952,948,944,64,64,64,192,176,160,144,128,112,960,956,952,948,944,940,128,192,64,96,96,96,96,192,192,96,96,96,96,128,128,64,64,64,64,192,192,192,192,96,96,96,96,96,96,128,128,448,448,128,128,64,64,96,96,96,96,128,128,448,448,180,192,64,64,96,96,192,192,96,96,96,96,96,96,384,384,128,128,64,64,96,96,96,96,192,192,384,384,384,368,352,336,320,304,96,192,96,128,64,96,128,256,96,96,192,96,128,64,96,128,256,96,96,96,96,128,128,128,192,192,192,256,256,256,256,768,752,736,720,704,688]
]
*/

// var zz1 = [.25,0,440,.01,.1,.05,2,2,,,,,,.1,,,.19,.7,.1,,113]
// var zz2 = [.7,0,,.05,,.4,2,2.8,,,,,,,,.1,.11,.7,.1,,-1163]
// var zz1 = [.1,0,,.01,,1,1,,,,,,,,,,,.5,.2]
// var zz2 = [.25,0,,.03,,0.5,1,,,,,,,,,,,.5,.2]
// var zz3 = [.08,0,,.03,,0.5,1,,,,,,,,,,,.5,.2]
// var zzfx_sound = [.25,0,440,.02,,.3,,2.6,,,,,.13,,,,.01,,,.06]
// var zzfx_sound = [.25,0,440,.05,,.2]

// var zz2 = [.25,0,,.03,,0.5,1,,,,,,,,,,,.5,.2]

// basic
// var zz1 = [.1,0,,.02,,0.5,1,,,,,,,,,,,.5,.2]
var zz1 = [,0,,.1,,.2,,10,,,,,,.03,,,.16,.2,.1,1]
var zz3 = [,0,,.1,,.2,,,,,,,,.03,,,.16,.2,.1,1]
// var zz3 = [,0,,.1,,.2,,10,,,,,,.03,,,.16,.2,.1,1]
var zz4 = [,0,,.02,,,,15]

// thanks https://github.com/nicolas-van/sonant-x
// n: halfnote, 128 = A4, 129 = A#4, 130 = B4, ...
// +64 because of the MIDI conversion
function getNoteFrequency(n)
{
	return Math.pow(1.059463094, n - 128 + 64) * 440;
}

function play() {
    var audioCtx = new AudioContext();

    const scriptNode = audioCtx.createScriptProcessor(4096 * 2, 1, 1);

    var sounds = [ ]
    var nextNoteTime = 0.1 // the audioProcessingEvent.playbackTime marks the end of the buffer, it is easier to fix it here

    var music_data = MUSIC
    var n = 0

    scriptNode.onaudioprocess = function(audioProcessingEvent) {
        var inputBuffer = audioProcessingEvent.inputBuffer;
        var outputBuffer = audioProcessingEvent.outputBuffer;

        for (var channel = 0; channel < outputBuffer.numberOfChannels; channel++) {
            var inputData = inputBuffer.getChannelData(channel);
            var outputData = outputBuffer.getChannelData(channel);
            var now

            for (var sample = 0; sample < inputBuffer.length; sample++)
            {
                outputData[sample] = inputData[sample]

                now = audioProcessingEvent.playbackTime + sample / outputBuffer.sampleRate

                while (nextNoteTime <= now)
                {
                    //zzfx_sound[2] = getNoteFrequency(MUSIC[0][n])
                    // zz2[2] = getNoteFrequency(MUSIC[0][n] - 12)

                    // sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zzfx_sound), pos: 0 })
                    /*
                    zz1[0] = 0.2 * 0.25
                    zz1[2] = getNoteFrequency(MUSIC[0][n]) * 0.25
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz1), pos: 0 })
                    */
                    zz1[0] = 0.3 * 0.25
                    zz1[2] = getNoteFrequency(music_data[1][n]) * 0.25
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz1), pos: 0 })

                    zz1[0] = 0.4 * 0.25
                    zz1[2] = getNoteFrequency(music_data[1][n]) * 0.5
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz1), pos: 0 })

                    zz4[0] = 0.5 * 0.25
                    zz4[2] = getNoteFrequency(music_data[1][n]) * 0.5
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz4), pos: 0 })

                    zz3[0] = 0.9 * 0.25
                    zz3[2] = getNoteFrequency(music_data[1][n]) * 1.0
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz3), pos: 0 })

                    /*
                    zz1[0] = 0.075 * 0.25
                    zz1[2] = getNoteFrequency(MUSIC[0][n]) * 2.0
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz1), pos: 0 })

                    zz1[0] = 0.05 * 0.25
                    zz1[2] = getNoteFrequency(MUSIC[0][n]) * 4.0
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz1), pos: 0 })

                    zz1[0] = 0.1 * 0.25
                    zz1[2] = getNoteFrequency(MUSIC[0][n]) * 8.0
                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz1), pos: 0 })
                    */

                    // zz3[2] = getNoteFrequency(MUSIC[0][n]) * 0.25
                    // sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zz3), pos: 0 })

                    n = (n + 1) % music_data[1].length

                    nextNoteTime += music_data[2][n] * music_data[0]
                }

                for (var i=0; i<sounds.length; i++)
                {
                    if (sounds[i].pos < sounds[i].data.length)
                    {
                        outputData[sample] += sounds[i].data[sounds[i].pos++]
                    }
                }
            }
        }

        for (var i=sounds.length-1; i>=0; i--)
        {
            if (sounds[i].pos == sounds[i].data.length)
            {
                sounds.splice(i, 1)
            }
        }
    }

    scriptNode.connect(audioCtx.destination)
}
