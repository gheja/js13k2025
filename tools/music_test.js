const MUSIC = [
    [60,60,59,59,57,59,57,55,55,55,57,59,60,59,57,55,72,72,71,72,71,71,69,71,69,71,69,67,67,67,69,71,72,71,71,66,67,69,67,80,81,82,83,84,84,83,84,83,83,84,83,81,83,81,83,81,83,81,79,79,79,81,83,84,83,84,83,84,83,83,78,79,81,79,79,78,77,76,75,74,73,72,84,71,72,71,83,69,71,69,71,69,71,69,67,91,72,72,83,83,84,83,84,83,84,85,86,87,88,89,102,93,91,72,79,72,76,71,72,71,74,71,69,72,69,72,71,69,67,71,67,71,67,67,69,71,72,79,72,79,83,71,83,71,83,71,84,69,67,83,67,83,67,83,67,83,67,83,67,83,67,83,72,91,72,88,71,72,71,86,71,69,84,69,84,71,86,71,86,69,84,69,84,67,83,67,83,67,83,67,71,74,71,67,71,74,79,74,71,74,79,72,91,91,91,95,91,95,71,71,69,97,69,67,98,67,98,67,98,67,98,68,99,69,100,70,101,60,88,91,60,88,91,59,86,91,59,86,91,57,84,84,59,91,57,84,86,55,88,86,94,95,91,94,95,91,103,60,100,91,91,103,59,98,91,103,102,100,57,102,100,55,95,71,70,71,70,67,60,94,93,91,93,94,93,91,89,86,85,84,82,84,57,86,87,59,88,91,57,93,95,55,67,67,67,67,60,99,100,103,60,99,100,103,59,98,103,101,98,97,91,94,93,91,57,89,85,84,55,83,55,67,58,70,55,67,58,70,59,71,60,72,64,76,67,79,76,88,79,91,83,95,59,71,62,74,66,78,74,86,78,90,81,93,57,69,61,73,64,76,55,59,62,65,67,71,74,77,79,83,86,89,91,95,98,101,103,102,103,102,103,102,103,102,103,102,103,102,103,55],
    [0,288,288,292,288,196,100,196,288,100,100,100,384,576,576,196,672,292,196,52,52,288,196,52,52,196,100,196,292,100,100,100,384,480,100,480,52,52,196,480,52,52,52,52,292,196,52,52,196,52,52,196,52,52,196,100,52,52,100,288,100,100,100,384,52,52,52,52,292,100,480,52,52,196,336,52,52,52,52,52,52,52,288,196,52,52,288,196,52,52,196,196,52,52,100,292,480,100,480,100,52,52,52,52,52,52,52,52,52,52,52,52,196,672,100,196,100,196,52,52,100,100,288,52,52,52,52,100,196,52,52,52,148,100,100,100,384,100,100,100,288,52,52,52,52,52,52,292,196,52,52,52,52,52,52,52,52,52,52,52,52,52,52,100,196,100,196,52,52,196,100,196,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,100,196,100,52,52,52,52,292,288,288,100,100,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,148,100,52,148,100,52,148,100,52,148,100,52,52,100,52,52,52,52,100,52,52,100,100,100,100,100,100,196,100,52,148,100,196,100,52,148,100,100,100,100,52,52,100,52,52,100,100,100,100,100,52,52,100,100,100,100,100,100,100,100,100,100,100,100,52,52,100,52,52,100,52,52,100,100,100,100,100,100,52,52,100,100,52,52,100,100,52,52,100,100,100,100,100,100,100,100,52,52,100,100,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,624],

]

const MUSIC_SEC_PER_UNIT = 0.0012

// var zzfx_sound = [.25,0,440,.01,.1,.05,2,2,,,,,,.1,,,.19,.7,.1,,113]
// var zzfx_sound = [.25,0,440,.02,,.3,,2.6,,,,,.13,,,,.01,,,.06]
var zzfx_sound = [.25,0,440,.05,,.2]

// thanks https://github.com/nicolas-van/sonant-x
// n: halfnote, 128 = A4, 129 = A#4, 130 = B4, ...
// +64 because of the MIDI conversion
function getNoteFrequency(n)
{
	return Math.pow(1.059463094, n - 128 + 64) * 440;
}

function play() {
    var audioCtx = new AudioContext();

    const scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);

    var sounds = [ ]
    var nextNoteTime = 0.1 // the audioProcessingEvent.playbackTime marks the end of the buffer, it is easier to fix it here
    var n = 0

    scriptNode.onaudioprocess = function(audioProcessingEvent) {
        var inputBuffer = audioProcessingEvent.inputBuffer;
        var outputBuffer = audioProcessingEvent.outputBuffer;

        for (var channel = 0; channel < outputBuffer.numberOfChannels; channel++) {
            var inputData = inputBuffer.getChannelData(channel);
            var outputData = outputBuffer.getChannelData(channel);
            var now

            for (var sample = 0; sample < inputBuffer.length; sample++)
            {
                outputData[sample] = inputData[sample]

                now = audioProcessingEvent.playbackTime + sample / outputBuffer.sampleRate

                while (nextNoteTime <= now)
                {
                    zzfx_sound[2] = getNoteFrequency(MUSIC[0][n])

                    sounds.push({ data: zzfx(outputBuffer.sampleRate, ...zzfx_sound), pos: 0 })

                    n = (n + 1) % MUSIC[0].length

                    nextNoteTime += MUSIC[1][n] * MUSIC_SEC_PER_UNIT
                }

                for (var i=0; i<sounds.length; i++)
                {
                    if (sounds[i].pos < sounds[i].data.length)
                    {
                        outputData[sample] += sounds[i].data[sounds[i].pos++]
                    }
                }
            }
        }

        for (var i=sounds.length-1; i>=0; i--)
        {
            if (sounds[i].pos == sounds[i].data.length)
            {
                sounds.splice(i, 1)
            }
        }
    }

    scriptNode.connect(audioCtx.destination)
}
